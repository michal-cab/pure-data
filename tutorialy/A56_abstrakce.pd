#N canvas 1 54 718 1017 12;
#X obj 517 113 abs01 7 dcer;
#X obj 517 89 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 517 140 5 0 0 0 - - -;
#X symbolatom 559 141 6 0 0 0 - - -;
#X obj 526 279 float \$1;
#X text 541 301 vs.;
#X obj 78 486 cnv 15 550 477 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 83 609 symbol \$1;
#X obj 163 608 symbol \$2;
#X obj 83 677 pack s s;
#X msg 83 701 \$1 kecá. Pravdu má \$2!;
#X obj 83 490 inlet;
#X obj 131 490 inlet;
#X obj 83 939 outlet;
#X obj 180 553 loadbang;
#X obj 374 750 &&;
#X obj 374 775 sel 1;
#X obj 503 723 > 1;
#X obj 374 724 > 1;
#X obj 83 749 list2symbol;
#X msg 83 775 set \$1;
#X obj 109 891 print;
#X obj 180 576 t b b;
#X obj 503 698 jasch_lib/strlen;
#X obj 374 699 jasch_lib/strlen;
#X msg 83 865 \ kecá.\ Pravdu\ má\ !;
#X obj 131 516 t b a;
#X obj 83 915 symbol;
#X text 540 485 kdo_keca.pd;
#X text 178 486 Abstrakce má dva vstupy \, levý se chová díky;
#X text 176 500 [t b a] jako aktivní vstup. [t] neumí poslat;
#X text 236 599 Abstrakce bude mít dva;
#X text 136 771 Levá větev patche zabalí oba;
#X text 136 787 symboly do seznamu \, který doteče;
#X text 92 803 do zprávy a v ní "vyplní" obě proměnné.;
#X obj 374 836 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text 91 819 Pak ze seznamu uděláme symbol a pomocí;
#X text 488 642 [jasch_lib/strlen];
#X text 489 671 argumenty dlouhé.;
#X text 401 842 jestli jsou oba argumenty;
#X obj 163 639 t a a;
#X obj 83 639 t a a;
#X text 209 633 Nejprve provedeme levou větev;
#X text 177 514 "s" (symbol) \, ale "a" (any) ano.;
#X text 402 858 delší než jeden znak. Pokud;
#X text 401 873 je podmínka v obou případech;
#X text 403 888 splněna \, pak pošle bang \, který;
#X text 402 904 inicializuje zprávu \, která byla;
#X text 403 919 vytvořena levou větví patche.;
#X text 265 861 <---------------;
#X msg 531 327 foo \$1;
#X obj 406 800 print moc kratke;
#X obj 83 725 list;
#X text 122 725 Selektorové abrakadabra!;
#X text 401 751 Logický AND operátor.;
#X text 70 254 Ještě jednou si zopakujme a zapamatujme \, že pokud
znak "\$1".."$n" zadáváme do objektu [float] nebo [symbol] \, který
je součástí abstrakce \, vytváříme tím argument \, který abstrakce
přijímá! Pokud znak "\$1".."$n" uvidíme kdekoliv ve zprávě \,
pak jde o obyčejnou proměnnou - "mezeru" \, která ve zprávě bude
nahrazena např. číslem \, které do ní doteče _ z číselného
boxu.;
#X obj 474 335 cnv 15 30 15 empty empty empty 20 12 0 14 -262144 -66577
0;
#X text 70 368 Na následujícím příkladu si ukážeme rozdílné
zapsání znaků "\$1" a "\$2" do objektů a zprávy. Jde už o trošku
"robustnější" abstrakci \, která "ošetřuje vstupy": kontroluje
u argumentů délku a pokud v obou případech není argument delší
než jeden znak \, upozorní nás na to ________ v konzoli. Pokud jsou
oba argumenty delší než jeden znak \, vypíše zprávu do konzole
i na výstup jako symbol.;
#X obj 419 433 cnv 15 120 15 empty empty empty 20 12 0 14 -262144 -66577
0;
#X text 516 259 V abstrakci;
#X text 527 345 kdekoliv.;
#X text 70 170 Dodejme \, že k dobré programátorské praxi patří
to \, že abstrakce uvnitř opatřujeme komentářem. Ten popisuje
\, jaké vstupy a argumenty abstrakce má \, co dělá a jaké dává
výstupy. Pojmenovat abstrakci při ukládání podle její funkce
je též užitečné.;
#X text 70 68 Na předchozí straně jsme vytvořili tři instance
abstrakce [RGBabs] \, kterým jsme předali různé hodnoty \, a každá
z nich se chová individuálně a nezávisle. Ve třetím případě
jsme [RGBabs] předali pouze dva argumenty \, takže na třetí výstup
pošle nulu. Stejně nezávisle by se chovala při předání jiných
argumentů i abstrakce asb01.;
#X text 245 548 V případě \, že abstrakci vytvoříme s argumenty
;
#X text 245 562 tento [loadbang] je hned protlačí do symbolů.;
#X text 236 612 argumenty typu symbol.;
#X text 209 646 patche \, a pak teprve pravou.;
#X text 490 656 zjistí \, jak jsou;
#X text 89 834 [set \$1( jím vyplníme prázdnou zprávu.;
#X text 403 828 Pravá větev patche kontroluje \,;
#X connect 0 0 2 0;
#X connect 0 1 3 0;
#X connect 1 0 0 0;
#X connect 7 0 41 0;
#X connect 8 0 40 0;
#X connect 9 0 10 0;
#X connect 10 0 52 0;
#X connect 11 0 7 0;
#X connect 12 0 26 0;
#X connect 14 0 22 0;
#X connect 15 0 16 0;
#X connect 16 0 35 0;
#X connect 16 1 51 0;
#X connect 17 0 15 1;
#X connect 18 0 15 0;
#X connect 19 0 20 0;
#X connect 20 0 25 0;
#X connect 22 0 7 0;
#X connect 22 1 8 0;
#X connect 23 0 17 0;
#X connect 24 0 18 0;
#X connect 25 0 21 0;
#X connect 25 0 27 0;
#X connect 26 0 7 0;
#X connect 26 1 8 0;
#X connect 27 0 13 0;
#X connect 35 0 25 0;
#X connect 40 0 23 0;
#X connect 40 1 9 1;
#X connect 41 0 24 0;
#X connect 41 1 9 0;
#X connect 52 0 19 0;
